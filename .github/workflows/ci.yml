name: Continuous Integration

on:
  push:
    branches:
      - "master"
    tags:
      - "*"
  pull_request:

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  Configuration: Release

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get Commit Message
        run: echo ::set-env name=COMMIT_MESSAGE::$(git log --format=%B -n 1 ${{ github.event.after }})

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1

      - name: Display .NET Info
        run: dotnet --info

      - name: Restore
        run: dotnet restore

      - name: Set version
        run: echo "::set-env name=VERSION::$(cat version.json | jq -r '.version')"

      - name: Display version
        run: echo ${{ env.VERSION }}

      - name: Check for Release Notes
        shell: bash
        run: if [ ! -f .github/releases/v$VERSION.md ]; then exit 1; fi

      - name: Check for Stale Version Number
        if: ${{ !startsWith(github.ref , 'refs/tags/v') }}
        shell: bash
        run: |
          lastTaggedVersion=$(git describe --abbrev=0 --tags)
          lastTaggedVersionSha=$(git rev-list -n 1 $lastTaggedVersion)
          if [ "$lastTaggedVersion" = "v$VERSION" ] && [ "$lastTaggedVersionSha" != "${{ github.event.head_commit.id }}" ]; then exit 1; fi

      - name: Build
        shell: bash
        run: dotnet build --no-restore -m  -bl:obj/logs/build-${{ matrix.os }}.binlog -p:PackageReleaseNotes="$(sed 's/,/%2c/g' .github/releases/v${{ env.VERSION }}.md)"

      - name: Test
        run: dotnet test --no-build

      - name: Run End to End Tests
        if: matrix.os == 'ubuntu-latest' && (startsWith(github.ref, 'refs/tags/v') || contains(env.COMMIT_MESSAGE, '[e2e]'))
        run: dotnet build -t:EndToEndTests -p:PackageBucket=${{ secrets.ARTIFACT_BUCKET }} -p:RoleArn=${{ secrets.CLOUDFORMATION_ROLE_ARN }}
        env:
          AWS_REGION: us-east-1
          AWS_DEFAULT_REGION: us-east-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Upload nugets
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v1
        with:
          name: nugets
          path: bin/Packages/${{ env.Configuration }}

      - name: Upload logs
        uses: actions/upload-artifact@v1
        with:
          name: logs-${{ matrix.os }}
          path: obj/logs/

      - name: Deploy to Github Packages
        if: matrix.os == 'ubuntu-latest'
        run: dotnet gpr push bin/Packages/${{ env.Configuration }}/*.nupkg -k ${{ secrets.GH_TOKEN }} || true

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        id: download
        with:
          name: nugets

      - name: Set version
        run: echo "::set-env name=VERSION::$(cat version.json | jq -r '.version')"

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1

      - name: Display .NET Info
        run: dotnet --info

      - name: Deploy to NuGet
        run: dotnet nuget push '${{steps.download.outputs.download-path}}/*.nupkg' -k ${{ secrets.NUGET_TOKEN }} -s https://api.nuget.org/v3/index.json --skip-duplicate

      - uses: ncipollo/release-action@v1
        with:
          artifacts: "${{steps.download.outputs.download-path}}/*.nupkg,${{steps.download.outputs.download-path}}/*.snupkg"
          bodyFile: ".github/releases/v${{ env.VERSION }}.md"
          tag: v${{ env.VERSION }}
          commit: ${{ env.GITHUB_SHA }}
          token: ${{ secrets.GH_TOKEN }}
          prerelease: ${{ contains(env.VERSION, '-') }}
