<Project Sdk="Microsoft.NET.Sdk">
    <PropertyGroup>
        <TargetFramework>net5.0</TargetFramework>
        <RuntimeIdentifiers>linux-x64</RuntimeIdentifiers>
        <RuntimeIdentifier>linux-x64</RuntimeIdentifier>
        <RestoreLockedMode>false</RestoreLockedMode>
        <RestorePackagesPath>$(MSBuildThisFileDirectory).nuget</RestorePackagesPath>
        <RestoreAdditionalProjectSources>$(PackageOutputPath);$(RestoreAdditionalProjectSources)</RestoreAdditionalProjectSources>
        <RestorePackagesWithLockFile>false</RestorePackagesWithLockFile>
    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="AWSSDK.Core" Version="$(AWSSDKCoreVersion)" />
        <PackageReference Include="Lambdajection.Core" Version="$(LambdajectionVersion)" />
        <PackageReference Include="Lambdajection.Encryption" Version="$(LambdajectionVersion)" />
    </ItemGroup>

    <!-- Because AWSSDK.Core is marked as PrivateAssets="all" in Lambdajection.Core, 
         its dependency graph is generated without it included.
         Therefore, for ReadyToRun to do its thing, we have to copy the aws sdk core assembly and its dependencies
         into the directory where the lambdajection.core assembly is located. -->
    <Target Name="PrepareForReadyToRun" AfterTargets="Restore" Condition="$([MSBuild]::IsOsPlatform('linux'))">
        <Copy
            SourceFiles="$(MSBuildThisFileDirectory).nuget/awssdk.core/$(AWSSDKCoreVersion)/lib/netcoreapp3.1/AWSSDK.Core.dll"
            DestinationFiles="$(MSBuildThisFileDirectory).nuget/lambdajection.core/$(LambdajectionVersion)/lib/net5.0/AWSSDK.Core.dll"
        />
    </Target>
</Project>
